// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth

model User {
  id                            String                          @id @default(cuid())
  email                         String                          @unique
  password                      String
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  RefreshToken                  RefreshToken[]
  SeedingDataCombinationHistory SeedingDataCombinationHistory[]
  SowingRateHistory             SowingRateHistory[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique //one token per user
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

//calc stuff
model Plant {
  id        String @id @default(cuid())
  latinName String @unique

  //combined
  seedingDataCombination                 SeedingDataCombination?
  SeedingDataCombinationHistoryPlantData SeedingDataCombinationHistoryPlantData[]
  SowingRatePlant                        SowingRatePlant?
  SowingRateHistory                      SowingRateHistory[]

  Chemical Chemical[]
}

//sowing rate
model SowingRatePlant {
  id String @id @default(cuid())

  // Relationship back to Plant
  plantId String @unique
  plant   Plant  @relation(fields: [plantId], references: [id], onDelete: Cascade)

  //sowing rate
  coefficientSecurity         SowingRateCoefficientSecurity?
  wantedPlantsPerMeterSquared SowingRateWantedPlantsPerMeterSquared?
  massPer1000g                SowingRateMassPer1000g?
  purity                      SowingRatePurity?
  germination                 SowingRateGermination?
  rowSpacingCm                SowingRateRowSpacingCm?
}

model SowingRateCoefficientSecurity {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)

  // // One-to-many relation to store coefficient values separately
  // values SowingRateCoefficientSecurityValue[]
}

// model SowingRateCoefficientSecurityValue {
//   id    String @id @default(cuid())
//   value Float

//   // Relationship back to SowingRateCoefficientSecurity
//   coefficientSecurityId String
//   coefficientSecurity   SowingRateCoefficientSecurity @relation(fields: [coefficientSecurityId], references: [id], onDelete: Cascade)
// }

model SowingRateWantedPlantsPerMeterSquared {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateMassPer1000g {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRatePurity {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateGermination {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateRowSpacingCm {
  id   String @id @default(cuid())
  type String @default("slider")
  unit String

  // Fields for slider type
  step         Float?
  minSliderVal Float?
  maxSliderVal Float?

  // Field for const type
  constValue Float?

  // Relationship back to Plant
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateHistory {
  id                                 String   @id @default(cuid())
  plantId                            String
  plant                              Plant    @relation(fields: [plantId], references: [id])
  userId                             String
  user                               User     @relation(fields: [userId], references: [id])
  sowingRateSafeSeedsPerMeterSquared Float
  sowingRatePlantsPerAcre            Float
  usedSeedsKgPerAcre                 Float
  internalRowHeightCm                Float
  totalArea                          Float
  isDataValid                        Boolean
  createdAt                          DateTime @default(now())
}

//combined
model SeedingDataCombination {
  id      String @id @default(cuid())
  plantId String @unique
  plant   Plant  @relation(fields: [plantId], references: [id])

  plantType           String
  minSeedingRate      Float
  maxSeedingRate      Float
  priceFor1kgSeedsBGN Float
}

model SeedingDataCombinationHistory {
  id          String                                   @id @default(cuid())
  plants      SeedingDataCombinationHistoryPlantData[]
  userId      String
  user        User                                     @relation(fields: [userId], references: [id])
  totalPrice  Float
  isDataValid Boolean
  createdAt   DateTime                                 @default(now())
}

model SeedingDataCombinationHistoryPlantData {
  id                              String                         @id @default(cuid())
  plantId                         String
  plant                           Plant                          @relation(fields: [plantId], references: [id])
  plantType                       String
  seedingRate                     Float
  participation                   Float
  combinedRate                    Float
  pricePerAcreBGN                 Float
  SeedingDataCombinationHistory   SeedingDataCombinationHistory? @relation(fields: [seedingDataCombinationHistoryId], references: [id])
  seedingDataCombinationHistoryId String?
}

//chemical protection

enum ChemicalType {
  HERBICIDE
  INSECTICIDE
  FUNGICIDE
}

enum ChemicalApplicationStage {
  AFTER_PLANTING_BEFORE_GERMINATION
  NON_VEGETATIVE
  VEGETATIVE
  SPECIAL_VEGETATIVE
}

model Chemical {
  id      String @id @default(cuid())
  plantId String @unique
  plant   Plant  @relation(fields: [plantId], references: [id])

  nameKey               String
  type                  ChemicalType
  activeIngredients     ChemicalActiveIngredient[]
  applicationStage      ChemicalApplicationStage
  //SPECIAL_VEGETATIVE means there is a bit more information about the application stage
  applicationStageNotes String

  chemicalTargetEnemies ChemicalTargetEnemy[]

  dosage          Float
  dosageUnit      String
  maxApplications Float

  minIntervalBetweenApplicationsDays Float
  maxIntervalBetweenApplicationsDays Float
  quarantinePeriodDays               Float
  pricePer1LiterBGN                  Float
  pricePerAcreBGN                    Float

  additionalInfo      String
  additionalInfoNotes String
}

model ActiveIngredient {
  id        String                     @id @default(cuid())
  nameKey   String                     @unique
  unit      String
  chemicals ChemicalActiveIngredient[]
}

model ChemicalActiveIngredient {
  id                 String @id @default(cuid())
  chemicalId         String
  activeIngredientId String

  chemical         Chemical         @relation(fields: [chemicalId], references: [id])
  activeIngredient ActiveIngredient @relation(fields: [activeIngredientId], references: [id])

  quantity Float
}

model ChemicalTargetEnemy {
  id         String   @id @default(cuid())
  chemicalId String
  chemical   Chemical @relation(fields: [chemicalId], references: [id])

  latinName String
}
