// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth

model User {
  id                            String                          @id @default(cuid())
  email                         String                          @unique
  password                      String
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  RefreshToken                  RefreshToken[]
  SeedingDataCombinationHistory SeedingDataCombinationHistory[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique //one token per user
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

//calc stuff
model Plant {
  id        String @id @default(cuid())
  latinName String @unique

  seedingDataCombination                 SeedingDataCombination?
  SeedingDataCombinationHistoryPlantData SeedingDataCombinationHistoryPlantData[]
}

// enum plantType {
//   legume //бобови
//   cereal //зърнени
// }

//combined
model SeedingDataCombination {
  id      String @id @default(cuid())
  plantId String @unique
  plant   Plant  @relation(fields: [plantId], references: [id])

  plantType           String
  minSeedingRate      Float
  maxSeedingRate      Float
  priceFor1kgSeedsBGN Float
}

model SeedingDataCombinationHistory {
  id          String                                   @id @default(cuid())
  plants      SeedingDataCombinationHistoryPlantData[]
  userId      String
  user        User                                     @relation(fields: [userId], references: [id])
  totalPrice  Float
  isDataValid Boolean
}

model SeedingDataCombinationHistoryPlantData {
  id                              String                         @id @default(cuid())
  plantId                         String
  plant                           Plant                          @relation(fields: [plantId], references: [id])
  plantType                       String
  seedingRate                     Float
  participation                   Float
  combinedRate                    Float
  pricePerDa                      Float
  SeedingDataCombinationHistory   SeedingDataCombinationHistory? @relation(fields: [seedingDataCombinationHistoryId], references: [id])
  seedingDataCombinationHistoryId String?
}
