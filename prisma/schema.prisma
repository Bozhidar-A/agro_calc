generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                           @id @default(cuid())
  email                          String                           @unique
  password                       String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  googleId                       String?                          @unique
  githubId                       String?                          @unique
  ChemProtPercentHistory         ChemProtPercentHistory[]
  ChemProtWorkingSolutionHistory ChemProtWorkingSolutionHistory[]
  RefreshToken                   RefreshToken?
  SeedingDataCombinationHistory  SeedingDataCombinationHistory[]
  SowingRateHistory              SowingRateHistory[]
  UserSettings                   UserSettings[]
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  theme                 String @default("light") //light, dark, system
  language              String @default("bg") //bg, en
  prefUnitOfMeasurement String @default("acres") //acres, hectares

  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ResetPassword {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email])
}

model Plant {
  id                                     String                                   @id @default(cuid())
  latinName                              String                                   @unique
  ChemProtWorkingSolutionHistory         ChemProtWorkingSolutionHistory[]
  plantChemicals                         PlantChemical[]
  seedingDataCombination                 SeedingDataCombination?
  SeedingDataCombinationHistoryPlantData SeedingDataCombinationHistoryPlantData[]
  SowingRateHistory                      SowingRateHistory[]
  SowingRatePlant                        SowingRatePlant?
}

model SowingRatePlant {
  id                          String                                 @id @default(cuid())
  plantId                     String                                 @unique
  coefficientSecurity         SowingRateCoefficientSecurity?
  germination                 SowingRateGermination?
  massPer1000g                SowingRateMassPer1000g?
  plant                       Plant                                  @relation(fields: [plantId], references: [id], onDelete: Cascade)
  purity                      SowingRatePurity?
  rowSpacingCm                SowingRateRowSpacingCm?
  wantedPlantsPerMeterSquared SowingRateWantedPlantsPerMeterSquared?
}

model SowingRateCoefficientSecurity {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateWantedPlantsPerMeterSquared {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateMassPer1000g {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRatePurity {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateGermination {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateRowSpacingCm {
  id            String          @id @default(cuid())
  type          String          @default("slider")
  unit          String
  step          Float?
  minSliderVal  Float?
  maxSliderVal  Float?
  constValue    Float?
  sowingPlantId String          @unique
  sowingPlant   SowingRatePlant @relation(fields: [sowingPlantId], references: [id], onDelete: Cascade)
}

model SowingRateHistory {
  id                                 String   @id @default(cuid())
  plantId                            String
  userId                             String
  sowingRateSafeSeedsPerMeterSquared Float
  sowingRatePlantsPerAcre            Float
  usedSeedsKgPerAcre                 Float
  internalRowHeightCm                Float
  isDataValid                        Boolean
  createdAt                          DateTime @default(now())
  totalArea                          Float
  plant                              Plant    @relation(fields: [plantId], references: [id])
  user                               User     @relation(fields: [userId], references: [id])
}

model SeedingDataCombination {
  id                  String @id @default(cuid())
  plantId             String @unique
  minSeedingRate      Float
  maxSeedingRate      Float
  priceFor1kgSeedsBGN Float
  plantType           String
  plant               Plant  @relation(fields: [plantId], references: [id])
}

model SeedingDataCombinationHistory {
  id          String                                   @id @default(cuid())
  userId      String
  totalPrice  Float
  isDataValid Boolean
  createdAt   DateTime                                 @default(now())
  user        User                                     @relation(fields: [userId], references: [id])
  plants      SeedingDataCombinationHistoryPlantData[]
}

model SeedingDataCombinationHistoryPlantData {
  id                              String                         @id @default(cuid())
  plantId                         String
  seedingRate                     Float
  participation                   Float
  combinedRate                    Float
  seedingDataCombinationHistoryId String?
  plantType                       String
  pricePerAcreBGN                 Float
  plant                           Plant                          @relation(fields: [plantId], references: [id])
  SeedingDataCombinationHistory   SeedingDataCombinationHistory? @relation(fields: [seedingDataCombinationHistoryId], references: [id])
}

model Chemical {
  id                                 String                           @id @default(cuid())
  nameKey                            String                           @unique
  type                               ChemicalType
  applicationStage                   ChemicalApplicationStage
  dosage                             Float
  dosageUnit                         String
  maxApplications                    Float
  minIntervalBetweenApplicationsDays Float
  maxIntervalBetweenApplicationsDays Float
  quarantinePeriodDays               Float
  pricePer1LiterBGN                  Float
  pricePerAcreBGN                    Float
  additionalInfo                     String
  additionalInfoNotes                String
  ChemProtWorkingSolutionHistory     ChemProtWorkingSolutionHistory[]
  activeIngredients                  ChemicalActiveIngredient[]
  chemicalTargetEnemies              ChemicalToEnemy[]
  plantUsages                        PlantChemical[]                  @relation("ChemicalToPlantUsages")
}

model PlantChemical {
  id         String   @id @default(cuid())
  plantId    String
  chemicalId String
  chemical   Chemical @relation("ChemicalToPlantUsages", fields: [chemicalId], references: [id])
  plant      Plant    @relation(fields: [plantId], references: [id])

  @@unique([plantId, chemicalId])
}

model ActiveIngredient {
  id        String                     @id @default(cuid())
  nameKey   String                     @unique
  unit      String
  chemicals ChemicalActiveIngredient[]
}

model ChemicalActiveIngredient {
  id                 String           @id @default(cuid())
  chemicalId         String
  activeIngredientId String
  quantity           Float
  activeIngredient   ActiveIngredient @relation(fields: [activeIngredientId], references: [id])
  chemical           Chemical         @relation(fields: [chemicalId], references: [id])

  @@unique([chemicalId, activeIngredientId])
}

model Enemy {
  id        String            @id @default(cuid())
  latinName String            @unique
  chemicals ChemicalToEnemy[]
}

model ChemicalToEnemy {
  id         String   @id @default(cuid())
  chemicalId String
  enemyId    String
  chemical   Chemical @relation(fields: [chemicalId], references: [id])
  enemy      Enemy    @relation(fields: [enemyId], references: [id])

  @@unique([chemicalId, enemyId])
}

model ChemProtWorkingSolutionHistory {
  id                                String    @id @default(cuid())
  userId                            String
  totalChemicalForAreaLiters        Float
  totalWorkingSolutionForAreaLiters Float
  roughSprayerCount                 Float
  chemicalPerSprayerML              Float
  isDataValid                       Boolean
  createdAt                         DateTime  @default(now())
  chemicalId                        String?
  plantId                           String?
  chemical                          Chemical? @relation(fields: [chemicalId], references: [id])
  plant                             Plant?    @relation(fields: [plantId], references: [id])
  user                              User      @relation(fields: [userId], references: [id])
}

model ChemProtPercentHistory {
  id                String   @id @default(cuid())
  userId            String
  desiredPercentage Float
  sprayerVolume     Float
  calculatedAmount  Float
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

enum ChemicalType {
  HERBICIDE
  INSECTICIDE
  FUNGICIDE
}

enum ChemicalApplicationStage {
  PRE_EMERGENT
  PRE_EMERGENT_AFTER_SOWING_BEFORE_EMERGENCE
  PRE_EMERGENT_BEFORE_START_OF_GROWING_SEASON
  PRE_EMERGENT_PRE_SOWING_SEEDS_TREATMENT
  PRE_EMERGENT_DURING_SOWING
  POST_EMERGENT
}
